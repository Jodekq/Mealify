// schema.prisma
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
 provider          = "postgresql"
 url               = env("DATABASE_URL")
 directUrl         = env("DIRECT_URL")
}

model User {
  id      String    @id @unique
  session Session[]
  Key     Key[]

  meals    Meal[]    @relation("UserMeals")
  schedule MealSchedule[]
  createdShares SharedMeal[] @relation("CreatorToSharedMeal")
  tobuyList ToBuyList[]

  username String @unique
  password String

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  expires         BigInt?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Meal {
  id          String    @id @unique @default(uuid())
  user        User      @relation("UserMeals", fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  name        String
  workingTime Int
  cookingTime Int
  restTime    Int
  totalTime   Int
  portions    Int
  ingredients MealIngredient[]
  steps       MealStep[]
  schedule    MealSchedule[]
  sharedMeals SharedMeal[] @relation("MealToSharedMeal")

  @@index([user_id])
}

model MealIngredient {
  id           String      @id @unique @default(uuid())
  meal         Meal        @relation(fields: [meal_id], references: [id], onDelete: Cascade)
  meal_id      String
  ingredient   Ingredient  @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
  ingredient_id String
  amount       Float?

  @@index([meal_id])
  @@index([ingredient_id])
}

model Ingredient {
  id   String  @id @unique @default(uuid())
  name String  @unique
  unit String? 
  meals MealIngredient[]
}

model MealStep {
  id        String  @id @unique @default(uuid())
  meal      Meal    @relation(fields: [meal_id], references: [id], onDelete: Cascade)
  meal_id   String
  stepNumber Int
  text      String
  extraText String?
  description String?

  @@index([meal_id])
}

model MealSchedule {
  id      String  @id @unique @default(uuid())
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  meal    Meal    @relation(fields: [meal_id], references: [id], onDelete: Cascade)
  meal_id String
  date    DateTime

  @@index([user_id])
  @@index([meal_id])
}

model SharedMeal {
  id         String   @id @unique @default(uuid())
  creator    User     @relation("CreatorToSharedMeal", fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id String
  meal       Meal     @relation("MealToSharedMeal", fields: [meal_id], references: [id], onDelete: Cascade)
  meal_id    String
  shareCode  String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([creator_id])
  @@index([meal_id])
  @@index([shareCode])
}

model ToBuyList {
  id          String    @id @unique @default(uuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  name        String
  isDefault   Boolean   @default(false)
  items       ToBuyItem[]

  @@map("tobuy_list")
}

model ToBuyItem {
  id           String       @id @unique @default(uuid())
  list         ToBuyList @relation(fields: [list_id], references: [id], onDelete: Cascade)
  list_id      String
  name         String
  amount       Float?
  unit         String?
  checked      Boolean      @default(false)

  @@map("tobuy_item")
}